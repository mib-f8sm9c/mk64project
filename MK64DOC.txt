MK64 (U) hacking doc
by shygoo
Aug 10 2015
______________________________________________________

ROM/RAM map
     ROM    RAM      Description
CODE ?????? 800067C4 Set places (1st, 2nd, etc)

     ?????? 8002F35C Controls cpu movement along track while player is moving
     ?????? 800400D0 MIO0 decoder
     ?????? 800404C0 MIO0 encoder
     ?????? 800405D0 TKMK00 decoder
     ?????? 80093134 Print text
     ?????? 8009338C Print text
     ?????? 80093788 Print text
     ?????? 80099124 Segmented to virtual address converter
     ?????? 80099154 Segmented to virtual address converter (duplicate)
     ?????? 800C4148 Play sound
DATA ------ 800DC53C Game mode selection
     ------ 800DC598 Course timer (float)
     ------ 800DC5A0 Course selection
     0E3AD0 800E2ED0 Kart unique settings table, 40 bytes per entry
     0F0468 800EF868 Ascii text bank
     ------ 80150258 RAM Segments table
     ------ 80165C18 Course RAM objects array? (bowser whomps, luigi hot air balloon)
     ------ 8018EDE4 Character selections
     ------ 8018EDF0 Player count selection
CODE ?????? 8029D830 Place all item boxes using segment 06 offset
     ?????? 802A7B94 Segment base setter
     ?????? 802A85CC MIO0 '0F' list related
     ?????? 802AA918 Course GFX data main loader 
DATA 122390 802B8D80 Course GFX data reference table
     12A1F0 ???????? Ascii text bank (credits)
     132B50 -------- First MIO0 block
     641F70 -------- An MIO0 bank (exclusively segment 05 course textures?)
     712DC0 -------- An MIO0 bank
     7FA3C0 -------- TKMK00 bank
     820FC0 -------- Last TKMK block in ROM
     821D00 -------- An MIO0 bank
     963EF0 -------- Last MIO0 block in ROM
     BC5F60 ???????? M64 music data
     BE9160 -------- End of ROM, 93856 padding bytes
______________________________________________________

RAM segments table (80150258)
 00 General purpose, always 0x00000000
 01 ?
 02 ?
 03 Common textures? (billboard tree images, ??)
 04 Course vertex data
 05 Course textures
 06 Course display lists, item box placements
 07 ?
 08 ?
 09 ?
 0A ?
 0B ?
 0C ?
 0D ?
 0F ?

Course data reference table (122390 / 802B8D80)
 This table references course display lists, vertex data, and textures
 Each entry is 0x30 bytes:
 
+---0x00: 008284D0 0082B620 // MIO0 block containing display lists, and item box placements, and ??; loaded into segment 06
|+--0x08: 0088FA10 0089B510 // MIO0 block containing course vertex data (gfx & collisions); loaded into segment 04
||+-0x10: 0088CD70 0088D070 // List of additional MIO0 block references (segment 5 textures?) segment 06 display list references
||| 0x18: 0F000000 // segment
||| 0x1C: 0000167D // ?
||| 0x20: 0F0096F4 // ?
||| 0x24: 00006930 // ?
||| 0x28: 09000000 // another segment?
||| 0x2C: 0000     // ?
||| 0x2E: ----     // struct padding, unused
|||  
||+-> Reference structure: // related function 802A85CC
||     0x00: 0F001080 // Offset of an MIO0 block relative to 641F70 (the '0F' prefix is ANDed out)
||     0x04: 00000149 // MIO0 block size
||     0x08: 00000800 // Some flag? Always 00000800 or 00001000  
||     0x0C: 00000000 // ? Always 0
|| 
||     At the end of the MIO0 block reference list there are 16 bytes of null padding followed by a list of segmented addresses referencing display lists in segment 06
||
|+--> Mesh entry structure:
|      0x00: s16 Vx
|	   0x02: s16 Vy
|	   0x04: s16 Vz
|      0x06: ?
|	   0x08: ?
|	   0x0A: ?
|	   0x0C: ?
|
+---> Offsets for item box positions here are hardcoded


 802AA918 Function called to load a course's assets
  A0 is passed as a course ID which is used as an index for the course data reference table
  800DC5A0 Current course selection ID:
   Mario Raceway       0000
   Choco Mountain      0001
   Bowser's Castle     0002
   Banshee Boardwalk   0003
   Yoshi Valley        0004
   Frappe Snowland     0005
   Koopa Troopa Beach  0006
   Royal Raceway       0007
   Luigi Raceway       0008
   Moo Moo Farm        0009
   Toad's Turnpike     000A
   Kalimari Desert     000B
   Sherbet Land        000C
   Rainbow Road        000D
   Wario Stadium       000E
   Block Fort          000F
   Skyscraper          0010
   Double Deck         0011
   DK's Jungle Parkway 0012
   Big Donut           0013
______________________________________________________

Current character selection (8018EDE4 [P1 P2 P3 P4]) (8018EDE8 [P1 P2 P3 P4] confirmations)
 None     00
 Mario    01
 Luigi    02
 Peach    03
 Toad     04
 Yoshi    05
 DK       06
 Wario    07
 Bowser   08

Player count selection (8018EDF0)
 1P Game  01
 2P Game  02
 3P Game  03
 4P Game  04

Game-mode selection (800DC53C)
 Mario GP 00000000
 T.Trials 00000001
 VS       00000002
 Battle   00000003

______________________________________________________
 
800EF868 / F0468 Ascii text bank

Printer functions:
 8009338C (a0 = x, a1 = y, a2 = pointer to asciiz string, a3 = controls text spacing) large
 80093788
 80093134

Special ascii sequences:
 A3 EE small "ND"
 A3 F2 small "RD"
 A3 F3 small "ST"
 A3 F4 small "TH"
______________________________________________________

800C4148 Play sound // wrapper functions: 800C8E10 menu sounds
 49018008 Rev up intro sound
 49009009 "Welcome to Mario Kart!"
 4900801A Start pressed at beginning of game
 49008000 Selection scroll
 49008001 Option selected
 49008002 Option cancel
 4900900C "Versus"
 4900900E "Mario grand prix"
 4900900E "Select a level"
 2900800E Mario selected ("Let's-a go!")
 2900801E Luigi selected ("Yahoo!")
 2900806E Peach selected
 
BC5F60 M64 table
 0003 // Revision 3
 001E // 30 M64 entries
 00000100 00002830
 00002930 00001B30
 00004460 00000D60
 000051C0 00001A10
 00006BD0 00001CA0
 00008870 00001F70
 0000A7E0 00001EE0
 0000C6C0 000016D0
 0000DD90 000023D0
 00010160 00001800
 00011960 00001AE0
 00013440 000005F0
 00013A30 000003D0
 00013E00 00000360
 00014160 000002E0
 00014440 000004C0
 00014900 00001410
 00015D10 000006E0
 000163F0 000032F0
 000196E0 000006C0
 00019DA0 000004B0
 0001A250 00001160
 0001B3B0 00000310
 0001B6C0 000012B0
 0001C970 00000600
 0001CF70 000016E0
 0001E650 00000AD0
 0001F120 00000C80
 0001FDA0 00002750
 000224F0 00000C80
 ^        ^
 |        +-------- Size of M64 block
 +----------------- Offset of M64 block relative to BC5F60

______________________________________________________
Objects/behavior related
 80040EE0 void thwomp_move(float* thwomp_y) moves a thwomp up and down
 8008B80C object x,y,z initialisation // callers: 80074C24, 80085484
 800DC59B float course timer
 801660A4 float Y coordinate of Luigi raceway hot air balloon
 80166424 float Y coordinate of a thwomp, 801675A4 another one
 
 
 course item box array 80160218
 item_box {
    ...
	float shadow_coord_y; // 0x08
	...
	float coord_x; // 0x1C
	float coord_y; // 0x20
	float coord_z; // 0x24 
	...
 }
 
 
 80165C18 course object array
 course_object { // 224 bytes each
  ...
  float coord_x; // 0x28
  float coord_y; // 0x2C
  float coord_z; // 0x30
  ...
 }
 
 
______________________________________________________
Other notes
 TKMK00 blocks seem to only contain image data for the background on startup, and startup selection screens
 Map of TKMK00 blocks: http://pastebin.com/raw.php?i=NnGnYfSu
 Map of MIO0 blocks:   http://pastebin.com/raw.php?i=SSnykJa9
 
 800F69A4 P1 X float
 800F69A8 P1 Y float
 800F69AC P1 Z float
 800F69be P1 rotation s16

 800BC360 m64 related code
 
Todo
 course m64 references
 course cpu-player path data and references
 course object placement