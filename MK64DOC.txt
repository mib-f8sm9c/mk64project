MK64 (U) hacking doc
by shygoo
Aug 3 2015
______________________________________________________

Address summary
     ROM    RAM      Description
ASM  ?????? 800400D0 Function: MIO0 decoder 
     ?????? 800404C0 Function: MIO0 encoder
     ?????? 800405D0 Function: TKMK00 decoder
     ?????? 80093134 Function: Print text
     ?????? 8009338C Function: Print text
     ?????? 80093788 Function: Print text
     ?????? 80099124 Function: Segmented to virtual address converter
     ?????? 80099154 Function: Segmented to virtual address converter (duplicate)
     ?????? 800C4148 Function: Play sound
DATA ------ 800DC53C Game mode selection
     ------ 800DC598 Course timer (float)
     ------ 800DC5A0 Course selection
     0F0468 800EF868 Ascii text bank
     ------ 80150258 RAM Segments table
     ------ 8018EDE4 Character selections
     ------ 8018EDF3 Player count selection
ASM  ?????? 802A7B94 Function: Segment base setter
     ?????? 802AA918 Function: Load course GFX
     122390 802B8D80 Course GFX data reference table
     
     BC5F60 ???????? M64 music data
______________________________________________________

RAM segments table (80150258)
 00 General purpose, always 0x00000000
 01 ?
 02 ?
 03 Common textures? (billboard tree images, ??)
 04 Course vertex data
 05 Course textures
 06 Course display lists
 07 ?
 08 ?
 09 ?
 0A ?
 0B ?
 0C ?
 0D ?
 0F ?

Course GFX reference table (122390 / 802B8D80) // Only GFX?
 This table references course display lists, vertex data, and textures
 Each entry is 0x30 bytes:
 
 0x00: 008284D0 0082B620 // MIO0 block primarily containing display lists, loaded into segment 6
 0x08: 0088FA10 0089B510 // MIO0 block containing course vertex data, loaded into segment 4
 0x10: 0088CD70 0088D070 // List of additional MIO0 block references, segment 6 display list references, all loaded into segment 5?
 0x18: 0F000000 // segment
 0x1C: 0000167D // ?
 0x20: 0F0096F4 // ?
 0x24: 00006930 // ?
 0x28: 09000000 // another segment?
 0x2C: 0000     // ?
 0x2E: ----     // struct padding, unused
 
  Additional MIO0 block reference list structure: // related function 802A85CC
   0F001080 00000149 00000800 00000000
   ^        ^        ^        ^
   |        |        |        +---------- ? Always 0
   |        |        +------------------- Some flag? Always 00000800 or 00001000  
   |        +---------------------------- MIO0 block size
   +------------------------------------- Offset of an MIO0 block relative to 641F70 (the 0F prefix is ANDed out)
   ...
   00000000 00000000 00000000 00000000 // 16 byte null padding, end of MIO0 reference list
   06000000 // Segment 6 display list references
   060001D0
   ...

 802AA918 Function called to load a course's gfx assets
  A0 is passed as a course ID which is used as an index for the course gfx reference table
  800DC5A0 Current course selection ID:
   Mario Raceway       0000
   Choco Mountain      0001
   Bowser's Castle     0002
   Banshee Boardwalk   0003
   Yoshi Valley        0004
   Frappe Snowland     0005
   Koopa Troopa Beach  0006
   Royal Raceway       0007
   Luigi Raceway       0008
   Moo Moo Farm        0009
   Toad's Turnpike     000A
   Kalimari Desert     000B
   Sherbet Land        000C
   Rainbow Road        000D
   Wario Stadium       000E
   Block Fort          000F
   Skyscraper          0010
   Double Deck         0011
   DK's Jungle Parkway 0012
   Big Donut           0013
______________________________________________________

Current character selection (8018EDE4 [P1 P2 P3 P4])
 None     00
 Mario    01
 Luigi    02
 Peach    03
 Toad     04
 Yoshi    05
 DK       06
 Wario    07
 Bowser   08
 
 8018EDE8 [P1 P2 P3 P4] Selection confirmations

Player count selection (8018EDF3)
 1P Game  01
 2P Game  02
 3P Game  03
 4P Game  04

Game-mode selection (800DC53C)
 Mario GP 00000000
 T.Trials 00000001
 VS       00000002
 Battle   00000003

______________________________________________________
 
800EF868 / F0468 Ascii text bank

Printer functions:
 8009338C (a0 = x, a1 = y, a2 = pointer to asciiz string, a3 = controls text spacing) large
 80093788
 80093134

Special ascii sequences:
 A3 EE small "ND"
 A3 F2 small "RD"
 A3 F3 small "ST"
 A3 F4 small "TH"
 
______________________________________________________

800C4148 Play sound // wrapper functions: 800C8E10 menu sounds
 49018008 Rev up intro sound
 49009009 "Welcome to Mario Kart!"
 4900801A Start pressed at beginning of game
 49008000 Selection scroll
 49008001 Option selected
 49008002 Option cancel
 4900900C "Versus"
 4900900E "Mario grand prix"
 4900900E "Select a level"
 2900800E Mario selected ("Let's-a go!")
 2900801E Luigi selected ("Yahoo!")
 2900806E Peach selected
 
BC5F60 M64 table

 0003 // Revision 3
 001E // 30 M64 entries
 00000100 00002830
 00002930 00001B30
 00004460 00000D60
 000051C0 00001A10
 00006BD0 00001CA0
 00008870 00001F70
 0000A7E0 00001EE0
 0000C6C0 000016D0
 0000DD90 000023D0
 00010160 00001800
 00011960 00001AE0
 00013440 000005F0
 00013A30 000003D0
 00013E00 00000360
 00014160 000002E0
 00014440 000004C0
 00014900 00001410 
 00015D10 000006E0
 000163F0 000032F0
 000196E0 000006C0
 00019DA0 000004B0
 0001A250 00001160
 0001B3B0 00000310
 0001B6C0 000012B0
 0001C970 00000600
 0001CF70 000016E0
 0001E650 00000AD0
 0001F120 00000C80
 0001FDA0 00002750
 000224F0 00000C80
 ^        ^
 |        +-------- Size of M64 block
 +----------------- Offset of M64 block relative to BC5F60

______________________________________________________
Objects/behavior related
 80166424 float Y coordinate of a thwomp, 801675A4 another one
 80040EE0 void thwomp_move(float* thwomp_y) moves a thwomp up and down
 8008B80C object x,y,z initialisation // callers: 80074C24, 80085484
 800DC59B float course timer
 801660A4 float Y coordinate of Luigi raceway hot air balloon
 
 80165C18 course object array
 course_object { // 224 bytes each
	...
	float coord_x; // 0x28
	float coord_y; // 0x2C
	float coord_z; // 0x30
	...
 }
______________________________________________________
 Other notes
  TKMK00 blocks seem to only contain image data for the background on startup, and startup selection screens
  Map of TKMK00 blocks: http://pastebin.com/raw.php?i=NnGnYfSu
  Map of MIO0 blocks:   http://pastebin.com/raw.php?i=SSnykJa9
  
 Todo
  course collision data and references
  course m64 references
  course cpu-player path data and references
  course object placement
  